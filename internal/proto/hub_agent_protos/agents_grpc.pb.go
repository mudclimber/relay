// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: agents.proto

package hub_agent_protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgentCommsClient is the client API for AgentComms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentCommsClient interface {
	NewAgent(ctx context.Context, in *NewAgentRequest, opts ...grpc.CallOption) (*NewAgentResponse, error)
	PingAgent(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type agentCommsClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentCommsClient(cc grpc.ClientConnInterface) AgentCommsClient {
	return &agentCommsClient{cc}
}

func (c *agentCommsClient) NewAgent(ctx context.Context, in *NewAgentRequest, opts ...grpc.CallOption) (*NewAgentResponse, error) {
	out := new(NewAgentResponse)
	err := c.cc.Invoke(ctx, "/hub_protos.agents.AgentComms/NewAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentCommsClient) PingAgent(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/hub_protos.agents.AgentComms/PingAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentCommsServer is the server API for AgentComms service.
// All implementations must embed UnimplementedAgentCommsServer
// for forward compatibility
type AgentCommsServer interface {
	NewAgent(context.Context, *NewAgentRequest) (*NewAgentResponse, error)
	PingAgent(context.Context, *PingRequest) (*PingResponse, error)
	mustEmbedUnimplementedAgentCommsServer()
}

// UnimplementedAgentCommsServer must be embedded to have forward compatible implementations.
type UnimplementedAgentCommsServer struct {
}

func (UnimplementedAgentCommsServer) NewAgent(context.Context, *NewAgentRequest) (*NewAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAgent not implemented")
}
func (UnimplementedAgentCommsServer) PingAgent(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingAgent not implemented")
}
func (UnimplementedAgentCommsServer) mustEmbedUnimplementedAgentCommsServer() {}

// UnsafeAgentCommsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentCommsServer will
// result in compilation errors.
type UnsafeAgentCommsServer interface {
	mustEmbedUnimplementedAgentCommsServer()
}

func RegisterAgentCommsServer(s grpc.ServiceRegistrar, srv AgentCommsServer) {
	s.RegisterService(&AgentComms_ServiceDesc, srv)
}

func _AgentComms_NewAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentCommsServer).NewAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hub_protos.agents.AgentComms/NewAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentCommsServer).NewAgent(ctx, req.(*NewAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentComms_PingAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentCommsServer).PingAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hub_protos.agents.AgentComms/PingAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentCommsServer).PingAgent(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentComms_ServiceDesc is the grpc.ServiceDesc for AgentComms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentComms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hub_protos.agents.AgentComms",
	HandlerType: (*AgentCommsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewAgent",
			Handler:    _AgentComms_NewAgent_Handler,
		},
		{
			MethodName: "PingAgent",
			Handler:    _AgentComms_PingAgent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agents.proto",
}

// AgentStreamsClient is the client API for AgentStreams service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentStreamsClient interface {
	AgentStream(ctx context.Context, opts ...grpc.CallOption) (AgentStreams_AgentStreamClient, error)
}

type agentStreamsClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentStreamsClient(cc grpc.ClientConnInterface) AgentStreamsClient {
	return &agentStreamsClient{cc}
}

func (c *agentStreamsClient) AgentStream(ctx context.Context, opts ...grpc.CallOption) (AgentStreams_AgentStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &AgentStreams_ServiceDesc.Streams[0], "/hub_protos.agents.AgentStreams/AgentStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentStreamsAgentStreamClient{stream}
	return x, nil
}

type AgentStreams_AgentStreamClient interface {
	Send(*AgentStreamRequest) error
	Recv() (*AgentStreamResponse, error)
	grpc.ClientStream
}

type agentStreamsAgentStreamClient struct {
	grpc.ClientStream
}

func (x *agentStreamsAgentStreamClient) Send(m *AgentStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *agentStreamsAgentStreamClient) Recv() (*AgentStreamResponse, error) {
	m := new(AgentStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentStreamsServer is the server API for AgentStreams service.
// All implementations must embed UnimplementedAgentStreamsServer
// for forward compatibility
type AgentStreamsServer interface {
	AgentStream(AgentStreams_AgentStreamServer) error
	mustEmbedUnimplementedAgentStreamsServer()
}

// UnimplementedAgentStreamsServer must be embedded to have forward compatible implementations.
type UnimplementedAgentStreamsServer struct {
}

func (UnimplementedAgentStreamsServer) AgentStream(AgentStreams_AgentStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AgentStream not implemented")
}
func (UnimplementedAgentStreamsServer) mustEmbedUnimplementedAgentStreamsServer() {}

// UnsafeAgentStreamsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentStreamsServer will
// result in compilation errors.
type UnsafeAgentStreamsServer interface {
	mustEmbedUnimplementedAgentStreamsServer()
}

func RegisterAgentStreamsServer(s grpc.ServiceRegistrar, srv AgentStreamsServer) {
	s.RegisterService(&AgentStreams_ServiceDesc, srv)
}

func _AgentStreams_AgentStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentStreamsServer).AgentStream(&agentStreamsAgentStreamServer{stream})
}

type AgentStreams_AgentStreamServer interface {
	Send(*AgentStreamResponse) error
	Recv() (*AgentStreamRequest, error)
	grpc.ServerStream
}

type agentStreamsAgentStreamServer struct {
	grpc.ServerStream
}

func (x *agentStreamsAgentStreamServer) Send(m *AgentStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *agentStreamsAgentStreamServer) Recv() (*AgentStreamRequest, error) {
	m := new(AgentStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentStreams_ServiceDesc is the grpc.ServiceDesc for AgentStreams service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentStreams_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hub_protos.agents.AgentStreams",
	HandlerType: (*AgentStreamsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AgentStream",
			Handler:       _AgentStreams_AgentStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "agents.proto",
}
